function es=es_new(N, xlow, xup, options)
% Evolution Strategy with Covariance Matrix Adaptation 
% for nonlinear minimization problems. 
% Author: Nikolaus Hansen, June 2001
% e-mail: hansen@bionik.tu-berlin.de
%
%     This source code is free software; you can redistribute it and/or
%     modify it under the terms of the GNU General Public License
%     version 2 as published by the Free Software Foundation.
%     (see http://www.gnu.org/copyleft/gpl.html)
%
%     This source code is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
% function es=es_new(N, xlow, xup [, options])
%   or 
% function es=es_new(stinput)
%   or
% function es=es_new(es [, 'clone'])
%   returns a struct defining an evolution strategy
%
% Input Arguments: 
%   N : Problem dimension.
%   xlow, xup : Scalars, or N by 1 matrices, which define a hyper-cube
%               in search space. The user suspects the desired optimum
%               to be within this hyper-cube. Remark that the search
%               will not go (far) beyond this hyper-cube in the
%               initial search phase.  On the other hand search is not
%               thoroughly restricted to this hyper-cube (use bounds
%               in options for this purpose, see es_options_new, item
%               3)). It is recommended to scale the problem in that
%               all edge lengths of the hyper-cube are identical (see
%               also 'scaling' in es_options_new).
%   [options] : (optional parameter) Structure with (additional)
%               parameter settings (see es_options_new and
%               es_options_set).  Calling es=es_new(N, xlow, xup) is
%               identical with calling es=es_new(N, xlow, xup,
%               es_options_new).
%   stinput : struct with fields N, xlow, xup and options as described
%             above. See also 'input' in es_get. Calling
%             es_new(stinput) is identical with calling
%             es_new(stinput.N, stinput.xlow, stinput.xup,
%             stinput.options).
%
%   es : es struct which is 'copied' or 'cloned' for the output es
%        struct. In the latter case the random number generator is
%        initialized identically as in the input es struct. For an
%        example see 'input' in es_get.
%
% es_new returns a structure (denoted with es), which serves as an
% optimizer with an evolution strategy and can be used with es_run(es,
% strfun) and the other functions called es_* (call function es_help
% or view the file es_READ.ME for further information).  Parameters
% concerned with the evolution strategy can be manipulated with the
% functions es_options_new and es_options_set. 
%
% For examples call es_help (or see file es_READ.ME). 
%
% See also es_help, es_run, es_options_new, es_get, es_set
%


%
% Implementational remarks: 
%   Among others, the structure es has the following fields which
%   again are structs:
%     input : Contains the three input arguments N, xlow, xup. 
%     options : Is assigned the optional input argument options or is
%               generated by the function es_options_new. 
%     aroptions : array of structs with fields iter and
%                 options. Any times when the options are changed the
%                 new options are recorded in aroptions. It holds
%                 aroptions(1).iter == 0.
%     opts : Is generated with es_set(es, 'options', ...) (using input
%            argument options from above). opts is then used by the
%            functions es_...  The options structure will not be used
%            again afterwards.
%     sp : Contains seven strategy parameters: lambda, mu,
%          recombination weights (recoweights), cumulation rate for
%          sigma (cs), damping for sigma (damp), cumulation rate for
%          distribution (cc), change rate for distribution
%          (ccov). These parameters are static, i.e.  not changed
%          during optimization. Default values are defined in
%          es_options_new.
%
% Remark: All fields are initialized either in es_new or in es_set
%         or in es_run if es.countgen == 0. Most is done in es_set.

%--------%--------%--------% BEGIN es_new %--------%--------%--------%--------%

  % Check errors
  error(nargchk(1,4,nargin));
  
  if nargin < 3
    % If first argument is es-struct
    if isfield(N, 'flg_is_es_struct')
      if ~N.flg_is_es_struct
	error(['Called with ' num2str(nargin) ...
	      ' argument(s): First argument is not an es-struct']);
      end
      if nargin > 1 & strcmp(xlow, 'clone')
	es = es_new(N.input.N, N.input.xlow, N.input.xup, ...
	    N.options);
      else
	es = es_new(N.input.N, N.input.xlow, N.input.xup, ...
	    es_options_new('es', N));
      end
      return;
    % If first argument is input-struct
    elseif isfield(N, 'N') & isfield(N, 'xlow') & ...
	  isfield(N, 'xup') & isfield(N, 'options')
      es = es_new(N.N, N.xlow, N.xup, N.options);
      return;
    else
      error(['Called with ' num2str(nargin) ...
	    ' argument(s): Wrong first argument type ']);
    end
  end
  
  % Check errors
  if ~isnumeric(N) | sum(size(N)) ~= 2 
    error(['Called with ' num2str(nargin) ...
	  ' argument(s): Wrong first argument type ']);
  end
  
  if N < 1 | floor(N) ~= N
    error(['Problem dimension N=' num2str(N) ' is invalid']);
  end
  
  if ~isempty(find(ones(N, 1).*xlow >= ones(N, 1).*xup))
    error(['components in argument xlow must be smaller than those in' ...
	  ' argument xup']);
  end
  
  % Go ahead 
  es.flg_is_es_struct = 1;
  
  % Set es.input
  es.input.N = N; es.input.xlow = xlow; es.input.xup = xup;
  
  % Set es.options
  if nargin < 4 
    es.options = es_options_new;
  else 
    es.options = options;
  end

  % Set dimension, initial values
  es.N=N; 
  es.countgen = 0; % number of iterations
  es.counteval = 0; 

  % Initialize some dynamic strategy parameters and constants
  es.B = eye(N); 
  es.pc = zeros(N,1); es.ps = zeros(N,1); 
  es.const.chiN=N^0.5*(1-1/(4*N)+1/(21*N^2));

  % Miscellaneous
  es.sp.lambda = 0;  % for convenience in es_set
  es.stbndweig = []; % struct to be used with function
                     % bndweig_adjust in es_run.m
  es.stconweig = []; % struct to be used e.g. with function
                     % conweig_adjust in es_run.m
			 
  % At last set (strategy) parameters and options.  Any
  % initialization which depends on options must be done in
  % function es_set
  es = es_set(es, 'options', es.options);
%--------%--------%--------% END es_new %--------%--------%--------%--------%

